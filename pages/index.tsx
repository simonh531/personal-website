import React, { useState, useEffect, useRef } from 'react';
import Head from 'next/head';
import {
  Box,
  // ToggleButtonGroup, ToggleButton,
  Paper, Grid, Stack, Tabs, Tab, IconButton,
  Container, useMediaQuery,
} from '@mui/material';
import { useTheme } from '@mui/material/styles';
// import ViewListIcon from '@mui/icons-material/ViewList';
// import ViewModuleIcon from '@mui/icons-material/ViewModule';
import contentfulClient, { ContentfulPortfolioEntry } from '../utils/contentful';
import FlipPaper from '../components/flipPaper';
import PortfolioCard from '../components/PortfolioCard';

export default function Home({ portfolio, otherPortfolio }:{
  portfolio: {
    items: ContentfulPortfolioEntry[]
  },
  otherPortfolio: {
    items: ContentfulPortfolioEntry[]
  },
}) {
  const { items } = portfolio;
  const { items: otherItems } = otherPortfolio;
  items.sort((itemA/* , itemB */) => {
    if (itemA.fields.name === 'RankedPoll') {
      return -1;
    }
    return 1;
  });
  const theme = useTheme();
  const isXs = useMediaQuery(theme.breakpoints.down('sm'));

  const [tab, setTab] = useState(0);
  const [focusedItem, setFocusedItem] = useState('');
  // transition plays if the transition property exists after the change
  const [useTransition, setUseTransition] = useState(true);
  const setFocused = (item:string) => () => {
    // set useTransition to true if the focused item is '', false otherwise
    setUseTransition(focusedItem === '');
    setFocusedItem(item);
  };
  const setUnfocused = () => {
    setUseTransition(true);
    setFocusedItem('');
  };
  // const [isList, setIsList] = useState(false);

  const portfolioRef = useRef<HTMLDivElement>(null);
  const keySet = new Set();

  let portfolioItems;
  switch (tab) {
    case 0:
      portfolioItems = items.filter((item) => item.fields.web).sort(
        (item1, item2) => item2.fields.order - item1.fields.order,
      ).map((item) => {
        keySet.add(item.fields.name);
        return (
          <PortfolioCard
            key={item.fields.name}
            item={item}
            pictures={item.fields.picture}
            focused={focusedItem === item.fields.name}
            setFocused={setFocused(item.fields.name)}
            setUnfocused={setUnfocused}
            useTransition={useTransition}
          />
        );
      });
      break;
    case 1:
      portfolioItems = items.filter((item) => item.fields.mobile).sort(
        (item1, item2) => item2.fields.order - item1.fields.order,
      ).map((item) => {
        keySet.add(item.fields.name);
        return (
          <PortfolioCard
            key={item.fields.name}
            item={item}
            pictures={item.fields.mobileScreenshot}
            focused={focusedItem === item.fields.name}
            setFocused={setFocused(item.fields.name)}
            setUnfocused={setUnfocused}
            useTransition={useTransition}
          />
        );
      });
      break;
    case 2:
      portfolioItems = otherItems.map((item) => {
        keySet.add(item.fields.name);
        return (
          <PortfolioCard
            key={item.fields.name}
            item={item}
            pictures={item.fields.picture}
            focused={focusedItem === item.fields.name}
            setFocused={setFocused(item.fields.name)}
            setUnfocused={setUnfocused}
            useTransition={useTransition}
          />
        );
      });
      break;
    default:
      break;
  }

  useEffect(() => {
    if (!keySet.has(focusedItem)) {
      setFocusedItem('');
    }
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [tab]);

  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  // const handleIsList = (event:React.MouseEvent<HTMLElement, MouseEvent>, value:any) => {
  //   setIsList(value);
  // };
  // console.log(props);
  return (
    <>
      <Head>
        <title>Simon H</title>
        {/* <meta name="description" content="Generated by create next app" /> */}
      </Head>
      <Stack sx={{
        alignItems: 'center',
        position: 'relative',
        height: {
          xs: 'calc(100vh - 56px)',
          sm: 'calc(100vh - 64px)',
        },
        flex: '1',
        justifyContent: 'space-evenly',
        zIndex: '1',
        color: 'rgba(255,255,255,0.87)',
      }}
      >
        <FlipPaper delay={1} variant="h1">
          I&apos;m Simon
        </FlipPaper>
        <FlipPaper delay={1.1} variant="h1">
          I make things
        </FlipPaper>
        <IconButton
          onClick={() => {
            if (portfolioRef.current) {
              portfolioRef.current.scrollIntoView({ behavior: 'smooth' });
            }
          }}
          size="large"
          sx={{
            pointerEvents: 'auto',
            color: 'rgba(255,255,255,0.87)',
            position: 'absolute',
            bottom: '10px',
          }}
        >
          <Box sx={{
            width: '50px',
            height: '50px',
            borderStyle: 'solid',
            borderColor: 'rgba(255,255,255,0.87)',
            transform: 'rotate(45deg)',
            borderWidth: '0',
            borderRightWidth: '5px',
            borderBottomWidth: '5px',
            margin: '25px',
            position: 'relative',
            bottom: '10px',
          }}
          />
        </IconButton>
      </Stack>
      <Paper
        square
        elevation={0}
        sx={{
          padding: {
            xs: 0,
            sm: 4,
          },
          paddingBottom: {
            xs: 2,
            sm: 4,
          },
          position: 'relative',
          backgroundColor: '#eeeeee',
        }}
        ref={portfolioRef}
      >
        <Container disableGutters>
          <Tabs
            value={tab}
            onChange={(event, value) => setTab(value)}
            variant={isXs ? 'fullWidth' : 'standard'}
          >
            <Tab label="Web" sx={{ textTransform: 'none' }} />
            <Tab label="Mobile" sx={{ textTransform: 'none' }} />
            <Tab label="Others" sx={{ textTransform: 'none' }} />
          </Tabs>
          {/* <ToggleButtonGroup
            value={isList}
            onChange={handleIsList}
            sx={{ margin: '1em', bgcolor: 'background.paper' }}
            color="primary"
            exclusive
          >
            <ToggleButton value={false}>
              <ViewModuleIcon />
            </ToggleButton>
            <ToggleButton value>
              <ViewListIcon />
            </ToggleButton>
          </ToggleButtonGroup> */}
        </Container>
      </Paper>
      <Box sx={{ overflow: 'hidden', position: 'relative' }}>
        <Container sx={{ zIndex: '4' }}>
          <Grid container spacing={2}>
            {portfolioItems}
          </Grid>
        </Container>
      </Box>
      <Paper square sx={{ height: '64px', backgroundColor: '#eeeeee' }} elevation={0} />
    </>
  );
}

export async function getStaticProps(/* context:Record<string, string> */) {
  const [portfolio, otherPortfolio] = await Promise.all([
    contentfulClient.getEntries({
      content_type: 'portfolioItem',
    }),
    contentfulClient.getEntries({
      content_type: 'otherPortfolioItem',
    }),
  ]);
  return {
    props: {
      portfolio,
      otherPortfolio,
    }, // will be passed to the page component as props
  };
}
